(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{797:function(t,s,a){"use strict";a.r(s);var r=a(14),n=Object(r.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey},scopedSlots:t._u([{key:"abstract",fn:function(){return[s("p",[t._v("本文主要记录将vue项目部署到Linux云服务器上遇到的一些问题。")]),t._v(" "),s("p",[t._v("使用Nginx来解决两个常见问题：")]),t._v(" "),s("ul",[s("li",[t._v("前后端分离导致的跨域问题")]),t._v(" "),s("li",[t._v("vue-router下的history模式，在部署到服务器后刷新会有404")])]),t._v(" "),s("blockquote",[s("p",[t._v("云服务器、域名最好都在同一平台购买，避免后期转入域名的麻烦。")])])]},proxy:!0}])},[s("h2",{attrs:{id:"什么是跨域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是跨域"}},[t._v("#")]),t._v(" 什么是跨域")]),t._v(" "),s("ul",[s("li",[t._v("浏览器不执行其他网站的脚本，是浏览器的同源策略造成，是对JavaScript的一种安全限制；")]),t._v(" "),s("li",[t._v("换句话说：通过浏览器向其他服务器发送请求时，不是服务器不响应，而是服务器返回的结果被浏览器限制了；")]),t._v(" "),s("li",[t._v("同源策略（Sameoriginpolicy）是一种约定，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，则浏览器的正常功能可能都会受到影响。可以说Web是构建在同源策略基础之上的，浏览器只是针对同源策略的一种实现。同源策略会阻止一个域的javascript脚本和另外一个域的内容进行交互。所谓同源：指的是协议、域名、端口 都要保持一致。")])]),t._v(" "),s("p",[t._v("解决跨域的方式有很多，比如JSONP、服务端设置CORS等等，这里不再详细展开，重点聊聊Nginx代理的方式。")]),t._v(" "),s("h2",{attrs:{id:"解决跨域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解决跨域"}},[t._v("#")]),t._v(" 解决跨域")]),t._v(" "),s("h3",{attrs:{id:"proxy代理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#proxy代理"}},[t._v("#")]),t._v(" proxy代理")]),t._v(" "),s("p",[t._v("开发vue项目时，修改vue.config.js中的proxy可以解决跨域问题。但这只是为了方便开发，只是在开发时生效，部署到服务器后依然还是要解决跨域。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("devServer")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 端口号")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("port")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"80"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//解决跨域")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("proxy")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v("'/proxy'")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v("'target'")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'http://**.*.**.***/'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//目标服务器")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v("'secure'")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false为http访问，true为https访问")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v("'changeOrigin'")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 跨域访问设置，true代表跨域")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v("'pathRewrite'")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 路径改写规则")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v("'^/proxy'")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 以/proxy/为开头的改写为''")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"nginx代理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nginx代理"}},[t._v("#")]),t._v(" nginx代理")]),t._v(" "),s("p",[t._v("nginx代理分为正向代理或反向代理。我们日常的“科学上网”可以用nginx做正向代理，而反向代理则可以用来解决跨域问题。")]),t._v(" "),s("p",[t._v("在宝塔面板中修改nginx的配置")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("server{\n    listen 80;#端口号\n    server_name zengqilin.online; #域名/ip\n    \n    #解决Vue页面刷新后404问题\n    location / {\n        index index.html index.htm index.php;\n        root dist; #静态文件根目录\n        try_files $uri $uri/ /index.html;\n    }\n\n    #需要代理的api地址\n    location ~ /api/ {\n        proxy_pass  http://xxx.xx.xx.xx:xxxx;\n    }\n}\n")])])]),s("blockquote",[s("p",[t._v("如果服务器内网能访问，外网不能访问，一般只需要把防火墙关了即可；或者去云服务器将你的Nginx端口开放为外网可以访问。")])])])}),[],!1,null,null,null);s.default=n.exports}}]);